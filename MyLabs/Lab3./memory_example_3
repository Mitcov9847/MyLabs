
#include <iostream> 
int a = 0;  // объявляется глобальная перемнная и иницилизируется 0
void staticMemory() // функция, которая выводит значения a и добавляет 1.
{ 
cout << "a: " << a << endl; a += 1; } 
int main() { 
staticMemory(); // prints 0 // вызов 1 и каждый вызов +1
staticMemory(); // prints 1  // вызов 2
staticMemory(); // prints 2  // вызов 3 
return 0; 
}
Программа объявляет глобальную переменную a и инициализирует её значением 0. Затем она определяет функцию staticMemory(), которая выводит значение a  и увеличивает его на 1. Функция main() вызывает функцию staticMemory() три раза, и увеличивается на 1 каждый раз.

В  static_1, у нас есть переменная a, которая находиться в функции staticMemory(). Она сохраняет своё значение между функции, но остается не доступной за её пределами.
Во втором случае static_2, переменная a находится снаружи функции. Она доступна всегда, потому что она находиться за пределами функции. 
Однако это создает путаницу и значение этой переменной может быть изменено.
Сделаем static_2 эквивалентным первому, переменной a, можно использовать модификатор static перед глобальной переменной.
Это сделает переменную статической только в пределах этого файла. И таким образом не сможем её использовать в других файлах.
